"""
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import sys
sys.path.insert(0, 'src')

def test_production_search():
    print("üå∏ –¢–ï–°–¢ –ì–û–¢–û–í–û–ì–û –ü–û–ò–°–ö–ê –¶–í–ï–¢–û–í")
    print("=" * 50)
    
    try:
        from database.vector_search import vector_search, search_flowers, search_verified_flowers, search_flowers_in_budget
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        vector_search.load_products_from_csv("final_products_case_standardized.csv")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–í–ï–¢–û–ß–ù–´–• –ü–†–û–î–£–ö–¢–û–í:")
        stats = vector_search.get_stats()
        if 'error' not in stats:
            print(f"   üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {stats.get('total_flowers', 0)}")
            print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('verified_flowers', 0)}")
            print(f"   üîó –° —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ URL: {stats.get('functional_urls', 0)}")
            
            price_dist = stats.get('price_distribution', {})
            print(f"   üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ (<500): {price_dist.get('budget', 0)}")
            print(f"   üí∞ –°—Ä–µ–¥–Ω–∏–µ (500-1500): {price_dist.get('medium', 0)}")
            print(f"   üí∞ –ü—Ä–µ–º–∏—É–º (>1500): {price_dist.get('premium', 0)}")
            
            print(f"\nüìÇ –¶–í–ï–¢–û–ß–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:")
            for i, cat in enumerate(stats.get('flower_categories', []), 1):
                print(f"   {i}. {cat}")
        
        print(f"\nüîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –¶–í–ï–¢–û–í:")
        print("=" * 40)
        
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Ä–æ–∑
        print(f"\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ '—Ä–æ–∑—ã –∫—Ä–∞—Å–Ω—ã–µ trandafiri':")
        roses = search_flowers("—Ä–æ–∑—ã –∫—Ä–∞—Å–Ω—ã–µ trandafiri", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(roses)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        for i, product in enumerate(roses, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} {product['name'][:60]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
            print(f"      üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['score']}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –±—É–∫–µ—Ç–æ–≤
        print(f"\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ '–±—É–∫–µ—Ç –¥–ª—è –º–∞–º—ã buchet mama':")
        bouquets = search_flowers("–±—É–∫–µ—Ç –¥–ª—è –º–∞–º—ã buchet mama", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(bouquets)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        for i, product in enumerate(bouquets, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} {product['name'][:60]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
            print(f"      üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['score']}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –≤ –±—é–¥–∂–µ—Ç–µ
        print(f"\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ –±—é–¥–∂–µ—Ç–µ –¥–æ 800 MDL 'flori frumoase':")
        budget_flowers = search_flowers_in_budget("flori frumoase", 800, limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(budget_flowers)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        for i, product in enumerate(budget_flowers, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} {product['name'][:60]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
            print(f"      üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['score']}")
        
        # –¢–µ—Å—Ç 4: –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        print(f"\n4Ô∏è‚É£ –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 'peonii bujori':")
        verified = search_verified_flowers("peonii bujori", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(verified)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        for i, product in enumerate(verified, 1):
            print(f"   {i}. ‚úÖ {product['name'][:60]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
            print(f"      üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['score']}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print(f"\n5Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'Classic Bouquets':")
        classic = vector_search.search_by_category("Classic Bouquets", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(classic)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        for i, product in enumerate(classic, 1):
            print(f"   {i}. üå∏ {product['name'][:60]}...")
            print(f"      üí∞ {product['price']} MDL")
        
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–û–ò–°–ö–ê –£–°–ü–ï–®–ù–´!")
        print(f"üéâ –ì–û–¢–û–í–´–ô –ü–†–û–î–£–ö–¢ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_no_non_flowers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ñ—Ñ—É–∑–æ—Ä—ã –∏ –∏–≥—Ä—É—à–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã"""
    print(f"\nüö´ –¢–ï–°–¢ –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ù–ï-–¶–í–ï–¢–û–í:")
    print("=" * 40)
    
    try:
        from database.vector_search import search_flowers
        
        # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Ñ—Ñ—É–∑–æ—Ä–æ–≤
        print(f"\nüß™ –ü–æ–∏—Å–∫ 'difuzor aroma chando':")
        diffusers = search_flowers("difuzor aroma chando", limit=5)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(diffusers)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        if len(diffusers) == 0:
            print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –î–∏—Ñ—Ñ—É–∑–æ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã")
        else:
            print("   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥–∏—Ñ—Ñ—É–∑–æ—Ä—ã - –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            for product in diffusers:
                print(f"      - {product['category']}: {product['name'][:50]}...")
        
        # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—É—à–µ–∫
        print(f"\nüß∏ –ü–æ–∏—Å–∫ 'soft toys plush':")
        toys = search_flowers("soft toys plush", limit=5)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(toys)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        if len(toys) == 0:
            print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ò–≥—Ä—É—à–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã")
        else:
            print("   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∏–≥—Ä—É—à–∫–∏ - –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return False

if __name__ == "__main__":
    print("üå∏ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ì–û–¢–û–í–û–ì–û –ü–†–û–î–£–ö–¢–ê")
    print("=" * 50)
    
    success1 = test_production_search()
    success2 = test_no_non_flowers()
    
    print(f"\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        print("‚úÖ –ì–û–¢–û–í–´–ô –ü–†–û–î–£–ö–¢ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")