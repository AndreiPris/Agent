"""
–ì–û–¢–û–í–´–ô –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è XOFlowers —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
–ò—Å–∫–ª—é—á–∞–µ—Ç –¥–∏—Ñ—Ñ—É–∑–æ—Ä—ã, –∏–≥—Ä—É—à–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¶–í–ï–¢–´
"""

import os
import csv
import chromadb
from sentence_transformers import SentenceTransformer

class ProductionVectorSearch:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ChromaDB
        self.client = chromadb.PersistentClient(path="./chroma_db_flowers")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        try:
            self.collection = self.client.create_collection("products")
        except:
            self.collection = self.client.get_collection("products")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¶–í–ï–¢–û–í (–∏—Å–∫–ª—é—á–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã)
        self.flower_categories = {
            "Author'S Bouquets",
            "Classic Bouquets", 
            "French Roses",
            "Mono/Duo Bouquets",
            "Basket / Boxes With Flowers",
            "Bride'S Bouquet",
            "Premium",
            "Peonies",
            "Mourning Flower Arrangement",
            "St. Valentine'S Day"
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ü–≤–µ—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–∏—Å–∫–∞)
        self.non_flower_categories = {
            "Chando",  # –î–∏—Ñ—Ñ—É–∑–æ—Ä—ã
            "Soft Toys",  # –ò–≥—Ä—É—à–∫–∏
            "Greeting Card",  # –û—Ç–∫—Ä—ã—Ç–∫–∏
            "Additional Accessories / Vases",  # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
            "Sweets"  # –°–ª–∞–¥–æ—Å—Ç–∏
        }
        
        print("‚úÖ Production vector search initialized with category filtering")
    
    def load_products_from_csv(self, csv_filename="final_products_case_standardized.csv"):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¶–í–ï–¢–û–ß–ù–´–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ CSV"""
        csv_path = f"data/{csv_filename}"
        
        if not os.path.exists(csv_path):
            csv_path = "data/chunks_data.csv"
            if not os.path.exists(csv_path):
                print("‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {csv_path}")
        else:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {csv_path}")
        
        products = []
        total_rows = 0
        valid_products = 0
        excluded_products = 0
        
        with open(csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            for row in reader:
                total_rows += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç
                if row.get('chunk_type') != 'product':
                    continue
                
                # –ò–°–ö–õ–Æ–ß–ê–ï–ú –ù–ï-–¶–í–ï–¢–û–ß–ù–´–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category = row.get('category', '')
                if category in self.non_flower_categories:
                    excluded_products += 1
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                if not self._is_valid_product(row):
                    continue
                
                valid_products += 1
                
                # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
                search_text = self._create_enhanced_search_text(row)
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π URL
                best_url = self._get_best_url(row)
                
                product = {
                    'id': row.get('chunk_id', f'product_{valid_products}'),
                    'text': search_text,
                    'name': row.get('primary_text', '')[:150],
                    'price': self._parse_price(row.get('price', '0')),
                    'category': category,
                    'flowers': row.get('flower_type', ''),
                    'url': best_url,
                    'collection_id': row.get('collection_id', ''),
                    'is_verified': row.get('is_verified', 'False'),
                    'url_functional': row.get('url_functional', 'False'),
                    'product_exists': row.get('product_exists', 'False'),
                    'is_flower_product': 'True'  # –ú–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                }
                
                products.append(product)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
        print(f"üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {valid_products}")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –Ω–µ-—Ü–≤–µ—Ç–æ–≤: {excluded_products}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ ChromaDB
        if products:
            self._add_products_to_db(products)
        else:
            print("‚ùå –¶–≤–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    def _create_enhanced_search_text(self, row):
        """–°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤"""
        parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        primary_text = row.get('primary_text', '')
        if primary_text:
            parts.append(primary_text)
        
        # –¢–∏–ø —Ü–≤–µ—Ç–æ–≤ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º
        flower_type = row.get('flower_type', '')
        if flower_type and flower_type != 'Difuzor aromƒÉ':
            parts.append(f"–¶–≤–µ—Ç—ã: {flower_type}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ)
        category = row.get('category', '')
        if category in self.flower_categories:
            if 'Bouquet' in category:
                parts.append("–ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤")
            elif 'Rose' in category:
                parts.append("–†–æ–∑—ã —Ç–∞–Ω–¥–∞—Ñ–∏—Ä–∏")
            elif 'Peonies' in category:
                parts.append("–ü–∏–æ–Ω—ã –±ujori")
            elif 'Basket' in category:
                parts.append("–ö–æ—Ä–∑–∏–Ω–∞ —Ü–≤–µ—Ç–æ–≤ –∫–æ—à")
            elif 'Wedding' in category or 'Bride' in category:
                parts.append("–°–≤–∞–¥–µ–±–Ω—ã–µ —Ü–≤–µ—Ç—ã nuntƒÉ")
        
        # –¶–µ–Ω–∞
        price = self._parse_price(row.get('price', '0'))
        if price > 0:
            parts.append(f"–¶–µ–Ω–∞: {price} MDL")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        parts.append("flori buchete cadou")
        
        return " | ".join(parts)
    
    def search_flowers(self, query, limit=5, price_max=None, verified_only=False):
        """
        –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        
        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            price_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            verified_only: —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            where_conditions = {
                "is_flower_product": "True"
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            additional_filters = []
            
            if verified_only:
                additional_filters.append({"is_verified": "True"})
            
            if price_max:
                additional_filters.append({"price": {"$lte": price_max}})
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if additional_filters:
                where_conditions = {
                    "$and": [where_conditions] + additional_filters
                }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_params = {
                'query_texts': [query],
                'n_results': limit,
                'where': where_conditions
            }
            
            results = self.collection.query(**search_params)
            
            products = []
            if results['documents'][0]:
                for i in range(len(results['documents'][0])):
                    metadata = results['metadatas'][0][i]
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Ü–≤–µ—Ç—ã
                    if metadata.get('category') in self.non_flower_categories:
                        continue
                    
                    product = {
                        'id': results['ids'][0][i],
                        'name': metadata['name'],
                        'price': metadata['price'],
                        'category': metadata['category'],
                        'flowers': metadata['flowers'],
                        'url': metadata['url'],
                        'score': round(1 - results['distances'][0][i], 3),
                        'text': results['documents'][0][i],
                        'is_verified': metadata.get('is_verified') == 'True',
                        'url_functional': metadata.get('url_functional') == 'True'
                    }
                    products.append(product)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            products.sort(key=lambda x: x['score'], reverse=True)
            
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤: {e}")
            return []
    
    def search_by_category(self, category, limit=10):
        """–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–≤–µ—Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if category not in self.flower_categories:
                print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–≤–µ—Ç–æ—á–Ω–æ–π")
                return []
            
            where_conditions = {
                "$and": [
                    {"category": category},
                    {"is_flower_product": "True"}
                ]
            }
            
            results = self.collection.get(
                where=where_conditions,
                limit=limit
            )
            
            products = []
            if results['metadatas']:
                for i, metadata in enumerate(results['metadatas']):
                    product = {
                        'id': results['ids'][i],
                        'name': metadata['name'],
                        'price': metadata['price'],
                        'category': metadata['category'],
                        'flowers': metadata['flowers'],
                        'url': metadata['url']
                    }
                    products.append(product)
            
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return []
    
    def get_popular_flowers(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
        try:
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            popular_categories = [
                "Classic Bouquets",
                "French Roses", 
                "Author'S Bouquets",
                "Premium"
            ]
            
            products = []
            for category in popular_categories:
                category_products = self.search_by_category(category, limit=3)
                products.extend(category_products)
                if len(products) >= limit:
                    break
            
            return products[:limit]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö: {e}")
            return []
    
    def search_in_budget(self, query, max_price, limit=5):
        """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ"""
        return self.search_flowers(
            query=query,
            limit=limit,
            price_max=max_price,
            verified_only=False
        )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ
    def _is_valid_product(self, row):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if row.get('product_exists', 'False') != 'True':
            return False
        
        if not row.get('primary_text', '').strip():
            return False
        
        price = self._parse_price(row.get('price', '0'))
        if price <= 0:
            return False
        
        return True
    
    def _get_best_url(self, row):
        """–í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π URL –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if row.get('url_fixed') and row.get('url_fixed').strip():
            return row['url_fixed']
        elif row.get('url') and row.get('url').strip():
            return row['url']
        elif row.get('original_url') and row.get('original_url').strip():
            return row['original_url']
        else:
            return ""
    
    def _parse_price(self, price_str):
        """–ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not price_str:
            return 0
        
        import re
        clean_price = re.sub(r'[^\d.]', '', str(price_str))
        
        try:
            return float(clean_price)
        except:
            return 0
    
    def _add_products_to_db(self, products):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.client.delete_collection("products")
            self.collection = self.client.create_collection("products")
        except:
            pass
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ids = [p['id'] for p in products]
        documents = [p['text'] for p in products]
        metadatas = [{
            'name': p['name'],
            'price': p['price'],
            'category': p['category'],
            'flowers': p['flowers'],
            'url': p['url'],
            'collection_id': p['collection_id'],
            'is_verified': p['is_verified'],
            'url_functional': p['url_functional'],
            'product_exists': p['product_exists'],
            'is_flower_product': p['is_flower_product']
        } for p in products]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ ChromaDB
        self.collection.add(
            documents=documents,
            metadatas=metadatas,
            ids=ids
        )
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –¶–í–ï–¢–û–ß–ù–´–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ ChromaDB!")
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            all_results = self.collection.get(
                where={"is_flower_product": "True"}
            )
            
            total_count = len(all_results['ids']) if all_results['ids'] else 0
            
            verified_count = 0
            functional_count = 0
            categories = set()
            price_ranges = {"budget": 0, "medium": 0, "premium": 0}
            
            if all_results['metadatas']:
                for metadata in all_results['metadatas']:
                    if metadata.get('is_verified') == 'True':
                        verified_count += 1
                    if metadata.get('url_functional') == 'True':
                        functional_count += 1
                    if metadata.get('category'):
                        categories.add(metadata['category'])
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
                    price = metadata.get('price', 0)
                    if price < 500:
                        price_ranges["budget"] += 1
                    elif price < 1500:
                        price_ranges["medium"] += 1
                    else:
                        price_ranges["premium"] += 1
            
            return {
                'total_flowers': total_count,
                'verified_flowers': verified_count,
                'functional_urls': functional_count,
                'flower_categories': sorted(list(categories)),
                'price_distribution': price_ranges
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def get_flower_categories(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return sorted(list(self.flower_categories))

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ì–û–¢–û–í–û–ì–û –ø–æ–∏—Å–∫–∞
vector_search = ProductionVectorSearch()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def search_flowers(query, limit=5):
    """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    return vector_search.search_flowers(query, limit)

def search_verified_flowers(query, limit=5):
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"""
    return vector_search.search_flowers(query, limit, verified_only=True)

def search_flowers_in_budget(query, max_price, limit=5):
    """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –≤ –±—é–¥–∂–µ—Ç–µ"""
    return vector_search.search_in_budget(query, max_price, limit)

def get_popular_flowers(limit=10):
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç—ã"""
    return vector_search.get_popular_flowers(limit)